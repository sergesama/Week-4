{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DISHES } from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n});\nexport const postFeedback = Feedback => dispatch => {\n  const newFeedback = Object.assign({}, Feedback);\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      alert('Thanks for your feedback: ' + JSON.stringify(newFeedback));\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addFeedback(response))).catch(error => {\n    console.log('add feedbacks', error.message);\n    alert('Your feedbackt could not be added\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["C:/Users/Sergesama/Desktop/React/Week-4/src/redux/ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","addFeedback","feedback","ADD_FEEDBACK","postFeedback","Feedback","newFeedback","Object","assign","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,OAAO,MAAMC,UAAU,GAAIC,OAAD,KAAc;AACpCC,EAAAA,IAAI,EAAEL,WAAW,CAACM,WADkB;AAEpCC,EAAAA,OAAO,EAAEH;AAF2B,CAAd,CAAnB;AAKP,OAAO,MAAMI,WAAW,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBP,OAAzB,KAAsCQ,QAAD,IAAc;AAE1E,QAAMC,UAAU,GAAG;AACfJ,IAAAA,MAAM,EAAEA,MADO;AAEfC,IAAAA,MAAM,EAAEA,MAFO;AAGfC,IAAAA,MAAM,EAAEA,MAHO;AAIfP,IAAAA,OAAO,EAAEA;AAJM,GAAnB;AAMAS,EAAAA,UAAU,CAACC,IAAX,GAAkB,IAAIC,IAAJ,GAAWC,WAAX,EAAlB;AAEA,SAAOC,KAAK,CAACf,OAAO,GAAG,UAAX,EAAuB;AAC/BgB,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,UAAf,CAFyB;AAG/BS,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHsB;AAM/BC,IAAAA,WAAW,EAAE;AANkB,GAAvB,CAAL,CAQNC,IARM,CAQDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAhBI,EAiBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GAnBI,EAoBNH,IApBM,CAoBDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EApBX,EAqBNP,IArBM,CAqBDC,QAAQ,IAAIb,QAAQ,CAACT,UAAU,CAACsB,QAAD,CAAX,CArBnB,EAsBNO,KAtBM,CAsBAL,KAAK,IAAK;AAAEM,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,KAAK,CAACQ,OAAnC;AAA6CC,IAAAA,KAAK,CAAC,8CAA4CT,KAAK,CAACQ,OAAnD,CAAL;AAAmE,GAtB5H,CAAP;AAuBH,CAjCM;AAkCP,OAAO,MAAME,WAAW,GAAIC,QAAD,KAAe;AACtCjC,EAAAA,IAAI,EAAEL,WAAW,CAACuC,YADoB;AAEtChC,EAAAA,OAAO,EAAE+B;AAF6B,CAAf,CAApB;AAMP,OAAO,MAAME,YAAY,GAAIC,QAAD,IAAe7B,QAAD,IAAc;AAEpD,QAAM8B,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,CAApB;AACAC,EAAAA,WAAW,CAAC5B,IAAZ,GAAmB,IAAIC,IAAJ,GAAWC,WAAX,EAAnB;AAEA,SAAOC,KAAK,CAACf,OAAO,GAAG,UAAX,EAAuB;AAC/BgB,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeqB,WAAf,CAFyB;AAG/BpB,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHsB;AAM/BC,IAAAA,WAAW,EAAE;AANkB,GAAvB,CAAL,CAQNC,IARM,CAQDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACrBU,MAAAA,KAAK,CAAC,+BAA+BhB,IAAI,CAACC,SAAL,CAAeqB,WAAf,CAAhC,CAAL;AACM,aAAOjB,QAAP;AACD,KAHD,MAGO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAjBI,EAkBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GApBI,EAqBNH,IArBM,CAqBDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EArBX,EAsBNP,IAtBM,CAsBDC,QAAQ,IAAIb,QAAQ,CAACyB,WAAW,CAACZ,QAAD,CAAZ,CAtBnB,EAuBNO,KAvBM,CAuBAL,KAAK,IAAK;AAAEM,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,KAAK,CAACQ,OAAnC;AAA6CC,IAAAA,KAAK,CAAC,+CAA6CT,KAAK,CAACQ,OAApD,CAAL;AAAoE,GAvB7H,CAAP;AAwBH,CA7BM;AA8BP,OAAO,MAAMU,WAAW,GAAG,MAAOjC,QAAD,IAAc;AAE3CA,EAAAA,QAAQ,CAACkC,aAAa,CAAC,IAAD,CAAd,CAAR;AAEA,SAAO7B,KAAK,CAACf,OAAO,GAAG,QAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAIoB,OAAO,GAAG,IAAInB,KAAJ,CAAUD,KAAK,CAACQ,OAAhB,CAAd;AACA,UAAMY,OAAN;AACL,GAbI,EAcNvB,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeDwB,MAAM,IAAIpC,QAAQ,CAACqC,SAAS,CAACD,MAAD,CAAV,CAfjB,EAgBNhB,KAhBM,CAgBAL,KAAK,IAAIf,QAAQ,CAACsC,YAAY,CAACvB,KAAK,CAACQ,OAAP,CAAb,CAhBjB,CAAP;AAiBH,CArBM;AAuBP,OAAO,MAAMW,aAAa,GAAG,OAAO;AAChCzC,EAAAA,IAAI,EAAEL,WAAW,CAACmD;AADc,CAAP,CAAtB;AAIP,OAAO,MAAMD,YAAY,GAAIH,OAAD,KAAc;AACtC1C,EAAAA,IAAI,EAAEL,WAAW,CAACoD,aADoB;AAEtC7C,EAAAA,OAAO,EAAEwC;AAF6B,CAAd,CAArB;AAKP,OAAO,MAAME,SAAS,GAAID,MAAD,KAAa;AAClC3C,EAAAA,IAAI,EAAEL,WAAW,CAACqD,UADgB;AAElC9C,EAAAA,OAAO,EAAEyC;AAFyB,CAAb,CAAlB;AAIP,OAAO,MAAMM,aAAa,GAAG,MAAO1C,QAAD,IAAc;AAC7C,SAAOK,KAAK,CAACf,OAAO,GAAG,UAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAIoB,OAAO,GAAG,IAAInB,KAAJ,CAAUD,KAAK,CAACQ,OAAhB,CAAd;AACA,UAAMY,OAAN;AACL,GAbI,EAcNvB,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeD+B,QAAQ,IAAI3C,QAAQ,CAAC4C,WAAW,CAACD,QAAD,CAAZ,CAfnB,EAgBNvB,KAhBM,CAgBAL,KAAK,IAAIf,QAAQ,CAAC6C,cAAc,CAAC9B,KAAK,CAACQ,OAAP,CAAf,CAhBjB,CAAP;AAiBH,CAlBM;AAoBP,OAAO,MAAMsB,cAAc,GAAIV,OAAD,KAAc;AACxC1C,EAAAA,IAAI,EAAEL,WAAW,CAAC0D,eADsB;AAExCnD,EAAAA,OAAO,EAAEwC;AAF+B,CAAd,CAAvB;AAKP,OAAO,MAAMS,WAAW,GAAID,QAAD,KAAe;AACtClD,EAAAA,IAAI,EAAEL,WAAW,CAAC2D,YADoB;AAEtCpD,EAAAA,OAAO,EAAEgD;AAF6B,CAAf,CAApB;AAKP,OAAO,MAAMK,WAAW,GAAG,MAAOhD,QAAD,IAAc;AAE3CA,EAAAA,QAAQ,CAACiD,aAAa,EAAd,CAAR;AAEA,SAAO5C,KAAK,CAACf,OAAO,GAAG,YAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAIoB,OAAO,GAAG,IAAInB,KAAJ,CAAUD,KAAK,CAACQ,OAAhB,CAAd;AACA,UAAMY,OAAN;AACL,GAbI,EAcNvB,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeDsC,MAAM,IAAIlD,QAAQ,CAACmD,SAAS,CAACD,MAAD,CAAV,CAfjB,EAgBN9B,KAhBM,CAgBAL,KAAK,IAAIf,QAAQ,CAACoD,YAAY,CAACrC,KAAK,CAACQ,OAAP,CAAb,CAhBjB,CAAP;AAiBH,CArBM;AAuBP,OAAO,MAAM0B,aAAa,GAAG,OAAO;AAChCxD,EAAAA,IAAI,EAAEL,WAAW,CAACiE;AADc,CAAP,CAAtB;AAIP,OAAO,MAAMD,YAAY,GAAIjB,OAAD,KAAc;AACtC1C,EAAAA,IAAI,EAAEL,WAAW,CAACkE,aADoB;AAEtC3D,EAAAA,OAAO,EAAEwC;AAF6B,CAAd,CAArB;AAKP,OAAO,MAAMgB,SAAS,GAAID,MAAD,KAAa;AAClCzD,EAAAA,IAAI,EAAEL,WAAW,CAACmE,UADgB;AAElC5D,EAAAA,OAAO,EAAEuD;AAFyB,CAAb,CAAlB;AAMP,OAAO,MAAMM,YAAY,GAAG,MAAOxD,QAAD,IAAc;AAE5CA,EAAAA,QAAQ,CAACyD,cAAc,EAAf,CAAR;AAEA,SAAOpD,KAAK,CAACf,OAAO,GAAG,SAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAIoB,OAAO,GAAG,IAAInB,KAAJ,CAAUD,KAAK,CAACQ,OAAhB,CAAd;AACA,UAAMY,OAAN;AACL,GAbI,EAcNvB,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeD8C,OAAO,IAAI1D,QAAQ,CAAC2D,UAAU,CAACD,OAAD,CAAX,CAflB,EAgBNtC,KAhBM,CAgBAL,KAAK,IAAIf,QAAQ,CAAC4D,aAAa,CAAC7C,KAAK,CAACQ,OAAP,CAAd,CAhBjB,CAAP;AAiBH,CArBM;AAuBP,OAAO,MAAMkC,cAAc,GAAG,OAAO;AACjChE,EAAAA,IAAI,EAAEL,WAAW,CAACyE;AADe,CAAP,CAAvB;AAIP,OAAO,MAAMD,aAAa,GAAIzB,OAAD,KAAc;AACvC1C,EAAAA,IAAI,EAAEL,WAAW,CAAC0E,cADqB;AAEvCnE,EAAAA,OAAO,EAAEwC;AAF8B,CAAd,CAAtB;AAKP,OAAO,MAAMwB,UAAU,GAAID,OAAD,KAAc;AACpCjE,EAAAA,IAAI,EAAEL,WAAW,CAAC2E,WADkB;AAEpCpE,EAAAA,OAAO,EAAE+D;AAF2B,CAAd,CAAnB","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n    \r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n};\r\nexport const addFeedback = (feedback) => ({\r\n    type: ActionTypes.ADD_FEEDBACK,\r\n    payload: feedback\r\n});\r\n\r\n\r\nexport const postFeedback = (Feedback) => (dispatch) => {\r\n\r\n    const newFeedback = Object.assign({}, Feedback)\r\n    newFeedback.date = new Date().toISOString();\r\n    \r\n    return fetch(baseUrl + 'feedback', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newFeedback),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n\t\t  alert('Thanks for your feedback: ' + JSON.stringify(newFeedback));\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addFeedback(response)))\r\n    .catch(error =>  { console.log('add feedbacks', error.message); alert('Your feedbackt could not be added\\nError: '+error.message); });\r\n};\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)))\r\n    .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\nexport const fetchComments = () => (dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    \r\n    dispatch(leadersLoading());\r\n\r\n    return fetch(baseUrl + 'leaders')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(leaders => dispatch(addLeaders(leaders)))\r\n    .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n});"]},"metadata":{},"sourceType":"module"}